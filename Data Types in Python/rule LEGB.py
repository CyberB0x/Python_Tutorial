# Области видимости переменных

# Локальные переменные функции
"""
В Python переменная доступна (к ней можно обращаться) с момента своего
создания и до конца своей области видимости — чаще всего это функция, в которой она объявлена. Если переменная объявлена вне всех функций, то она называется глобальной
"""

"""
Локальная область видимости: Переменные, созданные внутри функции, существуют 
в локальной области видимости этой функции и доступны только внутри неё.

Область видимости вложенных функций: Если функция определена внутри 
другой функции, её переменные доступны только внутри этой вложенной функции.

Глобальная область видимости: Переменные, определённые на уровне 
скрипта или модуля, считаются глобальными и доступны из любой части кода в том же модуле.

Встроенная область видимости: Это специальная область видимости, которая 
включает в себя все встроенные объекты и функции Python, доступные по умолчанию (например, print() и len()).
"""

# Правило LEGB
"""
Для разрешения переменных Python использует правило LEGB, которое определяет порядок, в котором интерпретатор ищет переменные:
L (Local) — Сначала поиск в локальной области видимости.
E (Enclosed) — Затем в областях видимости всех вложенных функций, от ближайшей к внешней.
G (Global) — Далее в глобальной области видимости.
B (Built-in) — Наконец, во встроенной области видимости.
"""

x = "global"  # Глобальная переменная

def outer():
    y = "outer local"  # Локальная переменная внешней функции
    def inner():
        z = "inner local"  # Локальная переменная вложенной функции
        print(x)  # Выводит "global"
        print(y)  # Выводит "outer local"
        print(z)  # Выводит "inner local"
    inner()

outer()

# Доступ к глобальным переменным: global x
x = 10

def change_global():
    global x  # Объявляем x как глобальную переменную
    print(x)  # Выведет 10 (идёт обращение к глобальной переменной x)
    x = 20  # Тут присваиваем новое значение глобальной переменной x
    print(x)  # Выведет 20 (идёт обращение к глобальной переменной x)

change_global()
print(x)  # Выведет 20

# Доступ к не-локальным переменным: nonlocal
"""
Кроме глобальных и локальных переменных, в Python существуют переменные из промежуточных областей видимости. Например, когда функция вложена в другую функцию. 
Для работы с такими переменными используется оператор nonlocal.
"""
def outer():
    count = 0

    def inner():
        nonlocal count
        count += 1
        return count

    return inner

counter = outer()
print(counter())  # Выведет

# Вот более практический пример использования nonlocal для создания счётчика:
def create_counter():
    count = 0

    def increment():
        nonlocal count
        count += 1
        return count

    return increment

counter = create_counter()
print(counter())  # Выведет 1
print(counter())  # Выведет 2
print(counter())  # Выведет 3