# Оператор return
"""
В Python оператор return играет центральную роль в функциях, поскольку с его помощью функция может вернуть своё значение.
Понимание его использования важно для эффективной разработки программного обеспечения.
Оператор return завершает выполнение функции и «возвращает» результат вызывающему коду. Если функция должна выдать результат, который будет использоваться дальше, используется return.
"""

# Возврат одного значения
# Функция может вернуть одно значение. Например:
def square(x):
    return x ** 2

result = square(5)
print(result)

# Возврат нескольких значений
# Функция может возвращать несколько значений как кортеж. Например:
def get_coordinates():
    return 10, 20

x, y = get_coordinates()
print(x, y)


# Возврат без значения
# Если в функции не указано return, она возвращает None по умолчанию:
def greet():
    print("Hello Python!")

result = greet()
print(result)

# Прерывание выполнения функции
# return завершает выполнение функции. Всё, что написано после него, не выполнится:
def check_num(x):
    if x > 0:
        return "Положительное число"
    return "Неположительное число"

print(check_num(5))
print(check_num(-3))

# Использование с циклами
# Если return используется внутри цикла, функция завершится при его выполнении:
def find(num):
    for numbers in num:
        if numbers % 2 == 0:
            return numbers
    return None

print(find([1, 2, 3, 4, 5, 6, 10]))

#----------------------------
# Оператор pass
"""
В Python есть специальный оператор — pass, который ничего не делает. 
Оператор pass используется как заполнитель в блоках кода, где синтаксически требуется содержание, но функционально оно ещё не определено (должен быть какой-то код, но пока не придумали какой).
"""
# Основные случаи использования pass
# Создание заглушек для функций или классов
"""
Если вы создаёте структуру функции, метода или класса, но ещё не написали их реализацию, используйте pass:
"""
def my_func():
    pass

class MyClass:
    pass


# Пропуск тела цикла
"""
Иногда требуется указать, что цикл ничего не должен делать в определённой итерации:
"""
for i in range(5):
    if i % 2 == 0:
        pass
    else:
        print(i)


# Внутри условных конструкций
"""
pass используется, если для определённых условий действие не требуется
"""
x = 10
if x > 0:
    pass
else:
    print("x отрицательное")


# Для удобства отладки
"""
Если вы разрабатываете код и не хотите удалять структуру программы, pass позволяет временно отключить часть кода:
"""
def calc(a, b):
    if a > b:
        pass
    else:
        return b - a

