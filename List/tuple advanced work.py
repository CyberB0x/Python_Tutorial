# Продвинутая работа с кортежами в Python

"""
Упаковка и распаковка данных
Кортежи отлично подходят для работы с несколькими значениями сразу. Например:
"""
# Упаковка
coordinates = (10, 20)

# Распаковка
x, y = coordinates
print(f"x: {x}, y: {y}")

# Обмен значениями с помощью кортежей
a, b = 5, 10
a, b = b, a
print(f"a: {a}, b: {b}")


"""
Именованные кортежи
Именованные кортежи позволяют работать с данными более читаемо.
"""
from collections import namedtuple

# Создаем именованный кортеж
Point = namedtuple("Point", "x y")
p = Point(10, 20)

print(f"Point: {p}")
print(f"x: {p.x}, y: {p.y}")


"""
Кортежи как ключи словарей
Поскольку кортежи неизменяемы, их можно использовать как ключи в словарях:
"""
# Кортежи в качестве ключей
locations = {
    (10.5, 20.3): "Home",
    (15.2, 18.1): "Work"
}

print(locations[(10.5, 20.3)])  # Home


"""
Генераторы и кортежи
Кортежи совместимы с генераторами:
"""
# Генерация кортежа
squares = tuple(x**2 for x in range(5))
print(squares)  # (0, 1, 4, 9, 16)


"""
Расширенная распаковка
Распаковка с использованием * позволяет собрать остаток элементов:
"""
numbers = (1, 2, 3, 4, 5)
first, *middle, last = numbers
print(f"First: {first}, Middle: {middle}, Last: {last}")

